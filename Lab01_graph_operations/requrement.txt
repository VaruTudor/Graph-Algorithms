X get the number of vertices; 
X parse (iterate) the set of vertices;
X given two vertices, find out whether there is an edge from the first one to the second one, and retrieve the Edge_id if there is an edge (the latter is not required if an edge is represented simply as a pair of vertex identifiers);
X get the in degree and the out degree of a specified vertex;
X parse (iterate) the set of outbound edges of a specified vertex (that is, provide an iterator). For each outbound edge, the iterator shall provide the Edge_id of the curren edge (or the target vertex, if no Edge_id is used).
X parse the set of inbound edges of a specified vertex (as above);
? get the endpoints of an edge specified by an Edge_id (if applicable);
X retrieve or modify the information (the integer) attached to a specified edge.
X The graph shall be modifiable: it shall be possible to add and remove an edge, and to add and remove a vertex. Think about what should happen with the properties of existing edges and with the identification of remaining vertices. You may use an abstract Vertex_id instead of an int in order to identify vertices; in this case, provide a way of iterating the vertices of the graph.
X The graph shall be copyable, that is, it should be possible to make an exact copy of a graph, so that the original can be then modified independently of its copy. Think about the desirable behaviour of an Edge_property attached to the original graph, when a copy is made.
X Read the graph from a text file (as an external function); see the format below.
X Write the graph from a text file (as an external function); see the format below.
  Create a random graph with specified number of vertices and of edges (as an external function).